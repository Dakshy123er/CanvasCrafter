import React, { useEffect, useState } from 'react';
import { Player } from '@lottiefiles/react-lottie-player';
import showcaseAnim from '../assets/showcase-anim.json';
import { FormField, Card, Loader } from '../components';
import { motion } from 'framer-motion';
const BASE_URL = "https://canvascrafter-oezs.onrender.com";

const fadeUp = {
  hidden: { opacity: 0, y: 40 },
  visible: { opacity: 1, y: 0, transition: { duration: 0.6 } }
};

const Showcase = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  const [searchText, setSearchText] = useState('');
  const [searchedResults, setSearchedResults] = useState([]);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        const res = await fetch(`${BASE_URL}/api/v1/post`);

        const result = await res.json();

        if (res.ok) {
          const uniquePhotos = new Set();
          const filteredPosts = [];

          result.data.reverse().forEach(post => {
            if (!uniquePhotos.has(post.photo)) {
              uniquePhotos.add(post.photo);
              filteredPosts.push(post);
            }
          });

          setAllPosts(filteredPosts);
        }
      } catch (error) {
        alert('Failed to load posts.');
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleDelete = async (id) => {
    const confirm = window.confirm("Are you sure you want to delete this post?");
    if (!confirm) return;

    try {
      const response = await fetch(`http://localhost:8080/api/v1/post/${id}`, {
        method: 'DELETE',
      });

      const result = await response.json();

      if (response.ok) {
        alert('✅ Post deleted!');
        setAllPosts((prev) => prev.filter((post) => post._id !== id));
      } else {
        alert('❌ Failed to delete post: ' + result.message);
      }
    } catch (err) {
      alert('❌ Error: ' + err.message);
    }
  };

  useEffect(() => {
    if (searchText.trim() === '') {
      setSearchedResults([]);
    } else {
      const filtered = allPosts.filter(post =>
        post.name.toLowerCase().includes(searchText.toLowerCase()) ||
        post.prompt.toLowerCase().includes(searchText.toLowerCase())
      );
      setSearchedResults(filtered);
    }
  }, [searchText, allPosts]);

  const renderCards = (data, title) => {
    if (data?.length > 0) {
      return data.map((post) => (
        <Card key={post._id} {...post} onDelete={handleDelete} />
      ));
    }
    return <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>;
  };

  return (
    <section className="relative mt-16 px-6 sm:px-12 lg:px-32 py-16 bg-white dark:bg-gray-900">
      <motion.div 
        className="absolute inset-0 w-full h-full bg-cover bg-center z-0 opacity-10"
        style={{ backgroundImage: "url('/your-background.jpg')" }}
        initial={{ opacity: 0 }}
        animate={{ opacity: 0.1 }}
        transition={{ duration: 1 }}
      />

      <div className="relative z-10 max-w-7xl mx-auto flex flex-col md:flex-row items-center gap-10 mb-16">
        <motion.div
          className="flex-1 text-center md:text-left"
          variants={fadeUp}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true }}
        >
          <motion.h2 className="text-4xl sm:text-4xl font-extrabold text-gray-900 dark:text-white mb-4">
            Community Showcase
          </motion.h2>
          <motion.p className="text-gray-600 dark:text-gray-300 text-lg">
            Browse a collection of imaginative and visually stunning images generated by AI.
          </motion.p>
        </motion.div>

        <div className="flex-1">
          <motion.div
            className="flex-1"
            variants={fadeUp}
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
          >
            <Player
              autoplay
              loop
              src={showcaseAnim}
              style={{ height: '280px', width: '100%' }}
            />
          </motion.div>
        </div>
      </div>

      <div className="relative z-10 mb-10">
        <FormField
          labelName="Search posts"
          type="text"
          name="search"
          placeholder="Search AI art..."
          value={searchText}
          handleChange={(e) => setSearchText(e.target.value)}
        />
      </div>

      <div className="relative z-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText ? (
              <>
                <h2 className="font-medium text-gray-700 dark:text-gray-200 text-xl mb-3">
                  Showing results for <span className="text-[#6469ff]">{searchText}</span>
                </h2>
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                  {renderCards(searchedResults, 'No search results found')}
                </div>
              </>
            ) : (
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                {renderCards(allPosts, 'No posts found')}
              </div>
            )}
          </>
        )}
      </div>
    </section>
  );
};

export default Showcase;
